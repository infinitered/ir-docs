#!/bin/bash

      # Define function to create _category_.json
      CreateCategoryJSON() {
          PROJECT_NAME=$1
          DOCS_DIR="./docs"

          # Ensure the target directory exists
          mkdir -p "$DOCS_DIR/$PROJECT_NAME/"

          # Inlined template with placeholders
          TEMPLATE='{
        "label": "'"${PROJECT_NAME}"'",
        "link": null,
        "customProps": {
          "description": "",
          "projectName": "'"${PROJECT_NAME}"'",
          "sidebar": {
            "type": "autogenerated",
            "dirName": "'"${PROJECT_NAME}"'"
          }
        }
      }'

          # Print the JSON to the _category_.json file
          echo "$TEMPLATE" > "$DOCS_DIR/$PROJECT_NAME/_category_.json"

          echo "$(tput setaf 2)_category_.json file created successfully.$(tput sgr 0)"
      }

      ACTION=$1

      if [ "$ACTION" = "add" ]; then
          # Ensure two arguments are provided
          if [ "$#" -ne 3 ]; then
              echo "$(tput setaf 1)Error: The add command requires two arguments:[project_name] [path_to_directory].$(tput sgr 0)"
              exit 1
          fi

          PROJECT_NAME=$2
          DIR=$3
          DOCS_DIR="./docs"
          TARGET="$DOCS_DIR/$PROJECT_NAME"
          BACKUP_DIR="./tmp/symlink"

          # Get the absolute path of the directory
          ABSOLUTE_SOURCE_DIR=$(realpath "$DIR")
          echo "Debug: Checking if this is a symlink: $TARGET"

          # Check if target already is a symlink
          if [ -h $TARGET ]; then
              echo "$(tput setaf 3)$TARGET is already a symlink. Aborting...$(tput sgr 0)"
              exit 1
          fi

          # If a directory already exists at the destination
          if [ -d "$TARGET" ]; then
              # Backup the existing directory by moving it
              echo "$(tput setaf 3)Saving backup of existing directory in $BACKUP_DIR$(tput sgr 0)"
              mkdir -p "$BACKUP_DIR"
              mv "$TARGET" "$BACKUP_DIR"
          fi

          # Create symlink
          echo "$(tput setaf 3)Creating symlink...$(tput sgr 0)"
          ln -s "$ABSOLUTE_SOURCE_DIR" "$TARGET"

          # Call function to create _category_.json
          CreateCategoryJSON "$PROJECT_NAME"

      elif [ "$ACTION" = "remove" ]; then
          # Ensure one argument is provided
          if [ "$#" -ne 2 ]; then
              echo "$(tput setaf 1)Error: The remove command requires one argument: [project_name].$(tput sgr 0)"
              exit 1
          fi

          PROJECT_NAME=$2
          DOCS_DIR="./docs"
          TARGET="$DOCS_DIR/$PROJECT_NAME"
          BACKUP_DIR="./tmp/symlink"

          if [ ! -L $TARGET ]; then
              echo "$(tput setaf 3)$TARGET is not a symlink. Aborting...$(tput sgr 0)"
              exit 1
          fi

          # Remove symlink
          echo "$(tput setaf 3)Removing symlink...$(tput sgr 0)"
          rm "$TARGET"

          # If a backup exists
          if [ -d "$BACKUP_DIR" ]; then
              # Restore the directory
              echo "$(tput setaf 3)Restoring backup...$(tput sgr 0)"
              mv "$BACKUP_DIR/$PROJECT_NAME" "$DOCS_DIR"
          fi

          echo "$(tput setaf 2)Changes have been undone.$(tput sgr 0)"


      else
          echo "$(tput setaf 1)Invalid command. Use 'add' to create a symlink or 'remove' to undo.$(tput sgr 0)"
          exit 1
      fi
